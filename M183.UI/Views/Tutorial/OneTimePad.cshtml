<h1>One Time Pad</h1>

<legend>Plaintext</legend>
<textarea id="plaintext"></textarea>
<button class="button" id="analyze_plaintext">Analyze Plaintext</button>
<button class="button" id="encrypt">Encrypt</button>
<input name="shift" id="encryptkey" value="" type="text" />

<legend>Historgram Plaintext</legend>
<div id="chart_plaintext"></div>

<br />
<legend>Ciphertext</legend>
Generated One-Time-Pad: <span id="key_onetime_pad"></span>
<textarea id="ciphertext"></textarea>
<button class="button" id="analyze_ciphertext">Analyze Ciphertext</button>
<button class="button" id="decrypt">Decrypt</button> using key
<input name="backshift" id="decryptkey" value="" type="text" />

<legend>Historgram Ciphertext</legend>
<div id="chart_ciphertext"></div>

<script>
    document.getElementById("analyze_plaintext").addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();

        var text = document.getElementById("plaintext").value;
        var histogram = createHistogramValues(text);

        document.getElementById("chart_plaintext").innerHTML = createHTMLTable(histogram);
    });

    document.getElementById("encrypt").addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();

        var plaintext = document.getElementById("plaintext").value;
        var encrypted_values = encryptOneTimePad(plaintext);
        document.getElementById("ciphertext").innerHTML = encrypted_values.ciphertext;
        document.getElementById("key_onetime_pad").innerHTML = encrypted_values.key;
    });

    document.getElementById("analyze_ciphertext").addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();

        var text = document.getElementById("ciphertext").value;
        var histogram = createHistogramValues(text);

        document.getElementById("chart_plaintext").innerHTML = createHTMLTable(histogram);
    });

    document.getElementById("decrypt").addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();

        var plaintext = document.getElementById("ciphertext").value;
        var key = document.getElementById("decryptkey").value;

        document.getElementById("ciphertext").innerHTML = decryptOneTimePad(plaintext, key);
    });

    function createHistogramValues(text) {
        var histogram_prepare = [];
        for (var i = 0, len = text.length; i < len; i++) {
            var letter = text[i];
            if (letter.match(/[a-z]/i)) {
                histogram_prepare[letter] = (histogram_prepare[letter] || 0) + 1;
            }
        }

        historgram = histogram_prepare.sort(function (a, b) {
            a = a[1];
            b = b[1];
            return a < b ? -1 : (a > b ? 1 : 0);
        });

        return historgram;
    }

    function createHTMLTable(historgram)
    {
        var html = "<table>";
        for (var key in historgram) {
            html += "<tr>";
            html += "<td>" + key + ": </td><td>&nbsp;</td>";
            html += "<td>" + historgram[key] + "</td>";
            html += "</tr>";
        }
        html += "</table>";
        return html;
    }

    function encryptOneTimePad(input) {
        var key = '';
        for (var k = 0; k < input.length; k++) {
            var c = input[k].charCodeAt(0);
            if ((c >= 65 && c <= 90))
            {
                key += String.fromCharCode(Math.floor(Math.random() * 26) + 65);
            }
            else if ((c >= 97 && c <= 122))
            {
                key += String.fromCharCode(Math.floor(Math.random() * 26) + 97);
            }
        }
        var output = "";
        for (var i = 0; i < input.length; i++) {
            var char = input[i];
            if (char.match(/[a-z]/i))
            {
                var c = parseInt(input.charCodeAt(i));
                var key_char_shift = parseInt(key.charCodeAt(i));
                if((c >= 65) && (c <= 90))
                {
                    output += String.fromCharCode((c - 65 + key_char_shift - 65) & 26 + 65);
                }
                else if ((c >= 97) && (c <= 122))
                {
                    output += String.fromCharCode((c - 97 + key_char_shift - 97) % 26 + 97);
                }
            }
        }
        return { "ciphertext": output, "key": key };
    }

    function decryptOneTimePad(input, key) {
        var output = "";
        for (var i = 0; i < input.length; i++) {
            var char = input[i];
            if (char.match(/[a.z]/i))
            {
                var cr = parseInt(input.charCodeAt(i));
                if ((cr >= 65) && (cr <= 90))
                {
                    var c = parseInt(cr - 65);
                    var key_char_shift = parseInt(key[i].charCodeAt(0) - 65 );
                    var new_char_position = (c - key_char_shift) % 26;
                    if (new_char_position < 0)
                        new_char_position += 26;
                    output += String.fromCharCode(new_char_position + 65);
                }
                else if ((cr >= 97) && (cr <= 122))
                {                    
                    var c = parseInt(cr - 97);
                    var key_char_shift = parseInt(key[i].charCodeAt(0) - 97 );
                    var new_char_position = (c - key_char_shift) % 26;
                    if (new_char_position < 0)
                        new_char_position += 26;
                    output += String.fromCharCode(new_char_position + 97);
                }
            }
        }
        return output;
    }
</script>